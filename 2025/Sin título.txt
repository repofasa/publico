import 'dart:async';
import 'package:flutter/material.dart';
import 'package:localstorage/localstorage.dart';
import 'package:share_plus/share_plus.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:url_launcher/url_launcher.dart';
import 'configuracion.dart';
import 'galeria.dart';
import 'main.dart';
import 'var_globales.dart';

final RouteObserver<ModalRoute<void>> routeObserver = RouteObserver<ModalRoute<void>>();
final InAppPurchase _inAppPurchase = InAppPurchase.instance;

class Suscripcion extends StatefulWidget {
  const Suscripcion({super.key});
  @override
  State<Suscripcion> createState() => _SuscripcionState();
}

class _SuscripcionState extends State<Suscripcion> with RouteAware {
  List<ProductDetails> _products = [];
  bool isLoading = true;
  late StreamSubscription<List<PurchaseDetails>> _subscription;

  final List<Map<String, dynamic>> ventajas = [
    {'icon': Icons.block, 'text': mc[78], 'color': Colors.redAccent},
    {'icon': Icons.calendar_today, 'text': mc[79], 'color': Colors.orangeAccent},
    {'icon': Icons.church, 'text': mc[75], 'color': Colors.brown},
    {'icon': Icons.book, 'text': mc[85], 'color': Colors.indigo},
    {'icon': Icons.calendar_month_rounded, 'text': mc[91], 'color': Colors.deepPurpleAccent},
    {'icon': Icons.photo_library, 'text': mc[116], 'color': Colors.lightBlue},
    {'icon': Icons.palette, 'text': mc[81], 'color': Colors.purpleAccent},
    {'icon': Icons.color_lens, 'text': mc[82], 'color': Colors.pinkAccent},
    {'icon': Icons.font_download, 'text': mc[83], 'color': Colors.teal},
    {'icon': Icons.border_style, 'text': mc[84], 'color': Colors.brown},
    {'icon': Icons.settings_remote, 'text': mc[80], 'color': Colors.green},
  ];

  @override
  void initState() {
    super.initState();
    _subscription = _inAppPurchase.purchaseStream.listen(_listenToPurchaseUpdated);
    _initData();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    routeObserver.subscribe(this, ModalRoute.of(context)!);
  }

  @override
  void dispose() {
    _subscription.cancel();
    routeObserver.unsubscribe(this);
    super.dispose();
  }

  @override
  void didPopNext() {
    _initData();
  }

  Future<void> _initData() async {
    setState(() {
      isLoading = true;
    });
    try {
      await _initializePurchase();
    } catch (_) {
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  Future<void> _initializePurchase() async {
    final bool available = await _inAppPurchase.isAvailable();
    if (!available) {
      setState(() {
        _products = [];
      });
      debugPrint('In-App Purchase no disponible');
      return;
    }

    const Set<String> ids = {'misal_sm'};
    final ProductDetailsResponse response = await _inAppPurchase.queryProductDetails(ids);
    setState(() {
      _products = response.productDetails;
    });

    await _inAppPurchase.restorePurchases();
  }

  void _listenToPurchaseUpdated(List<PurchaseDetails> purchaseDetailsList) async {
    for (final purchase in purchaseDetailsList) {
      if (purchase.productID == 'misal_sm') {
        if (purchase.status == PurchaseStatus.purchased || purchase.status == PurchaseStatus.restored) {
          localStorage.setItem('premium', 'true');
          try {
            await _inAppPurchase.completePurchase(purchase);
          } catch (e) {
            debugPrint('Error al completar la compra: $e');
          }
          muestraMsg('premium');
          restartApp(context);
        } else if (purchase.status == PurchaseStatus.error) {
          muestraMsg('error');
        } else if (purchase.status == PurchaseStatus.pending) {
          muestraMsg('wait');
        }
      }
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      drawer: Drawer(
        backgroundColor: colorFondo,
        child: ListView(
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Image.asset('assets/base/fasabe.png', width: 30, height: 30),
            ),
            Divider(height: 7, thickness: 0, indent: 2, endIndent: 2, color: colorBorde),
            _buildDrawerItem('assets/emojis/inicio.png', mc[0], () {
              Navigator.push(context, MaterialPageRoute(builder: (_) => const MyApp()));
            }),
            _buildDrawerItem('assets/emojis/star.png', mc[1], califica),
            _buildDrawerItem('assets/emojis/phone_android.png', mc[2], () {
              launchUrl(Uri.parse(urlDevIDG), mode: LaunchMode.externalApplication);
            }),
            _buildDrawerItem('assets/emojis/photo.png', mc[29], () {
              Navigator.push(context, MaterialPageRoute(builder: (_) => GaleriaMisal()));
            }),
            _buildDrawerItem('assets/emojis/build.png', mc[4], () {
              Navigator.push(context, MaterialPageRoute(builder: (_) => const ConfiGuracion()));
            }),
            _buildDrawerItem('assets/emojis/share.png', mc[32], () {
              SharePlus.instance.share(ShareParams(text: urlappIDG));
            }),
          ],
        ),
      ),
      appBar: AppBar(
        title: Center(child: Text(mc[7])),
        actions: [
          IconButton(icon: const Icon(Icons.arrow_back), onPressed: () => Navigator.pop(context)),
        ],
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator(color: Colors.blue))
          : SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Image.asset('assets/emojis/subscription.png', width: 125),
            const SizedBox(height: 10),
            Text(mc[86], style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
            const SizedBox(height: 10),
            Text(mc[87], style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold, color: Colors.deepPurple)),
            const SizedBox(height: 10),
            Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                border: Border.all(color: colorBorde, width: anchoBorde),
                borderRadius: BorderRadius.circular(10),
              ),
              child: Column(
                children: ventajas.asMap().entries.map((entry) {
                  return _buildAdvantage(entry.value['icon'], entry.value['text'], entry.value['color'], entry.key == ventajas.length - 1);
                }).toList(),
              ),
            ),
            const SizedBox(height: 10),
            RichText(
              text: TextSpan(
                text: '${mc[91]}: ${mc[92]}',
                style: const TextStyle(fontSize: 8, fontWeight: FontWeight.bold, color: Colors.deepPurpleAccent),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            SizedBox(
              width: double.infinity,
              height: 50,
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                ),
                onPressed: _products.isEmpty
                    ? null
                    : () {
                  final purchaseParam = PurchaseParam(productDetails: _products[0]);
                  _inAppPurchase.buyNonConsumable(purchaseParam: purchaseParam);
                },
                child: Text(
                    _products.isEmpty
                        ? mc[86]
                        : "${mc[93]} ${_products[0].price} ${_products[0].currencyCode}",
                    style: const TextStyle(fontSize: 18, color: Colors.white),
                ),
              ),
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildAdvantage(IconData icon, String text, Color color, bool isLast) {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(icon, color: color, size: 25),
            const SizedBox(width: 10),
            Expanded(child: Text(text, style: const TextStyle(fontSize: 16, color: Colors.black))),
          ],
        ),
        if (!isLast) Divider(color: Colors.grey.shade300, thickness: 1),
      ],
    );
  }

  Widget _buildDrawerItem(String assetPath, String title, VoidCallback onTap) {
    return ListTile(
      title: GestureDetector(
        onTap: onTap,
        child: Row(
          children: [
            Image.asset(assetPath, width: 22, height: 22),
            const SizedBox(width: 5),
            Text(title),
          ],
        ),
      ),
    );
  }
}
