import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:localstorage/localstorage.dart';
import 'configuracion.dart';
import 'galeria.dart';
import 'main.dart';
import 'var_globales.dart';
import 'package:permission_handler/permission_handler.dart';

class MuestraIglesia extends StatefulWidget {
  const MuestraIglesia({super.key});

  @override
  IglesiaState createState() => IglesiaState();
}

class IglesiaState extends State<MuestraIglesia> {
  bool isLoading = true;
  LatLng? _currentPosition;
  Set<Marker> _markers = {};
  GoogleMapController? _mapController;

  @override
  void initState() {
    super.initState();
    initAsyncStuff();
  }

  Future<void> initAsyncStuff() async {
    if (premium) {
      await pedirPermisoUbicacion();
    }
    await _initStorageAndLoad();
  }

  Future<void> pedirPermisoUbicacion() async {
    var status = await Permission.location.status;
    if (!status.isGranted) {
      PermissionStatus result = await Permission.location.request();
      if (result.isGranted) {
        debugPrint("Permiso de ubicación concedido");
      } else {
        debugPrint("Permiso de ubicación denegado");
      }
    } else {
      debugPrint("Permiso de ubicación ya concedido");
    }
  }

  Future<void> _initStorageAndLoad() async {
    await _getCurrentLocation();
  }

  Future<void> _getCurrentLocation() async {
    if (!mounted) return;
    setState(() => isLoading = true);

    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      debugPrint("Servicio de ubicación deshabilitado");
      if (!mounted) return;
      setState(() => isLoading = false);
      return;
    }

    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        debugPrint("Permiso de ubicación denegado");
        if (!mounted) return;
        setState(() => isLoading = false);
        return;
      }
    }

    if (permission == LocationPermission.deniedForever) {
      debugPrint("Permiso de ubicación denegado para siempre");
      if (!mounted) return;
      setState(() => isLoading = false);
      return;
    }

    if (premium) {
      try {
        Position position = await Geolocator.getCurrentPosition();
        if (!mounted) return;
        setState(() {
          _currentPosition = LatLng(position.latitude, position.longitude);
        });
        await _getNearbyChurches(position.latitude, position.longitude);
      } catch (e) {
        debugPrint("Error al obtener la ubicación: $e");
      } finally {
        if (mounted) setState(() => isLoading = false);
      }
    } else {
      if (mounted) setState(() => isLoading = false);
    }
  }

  Future<void> _getNearbyChurches(double lat, double lng) async {
    const cacheDurationMinutes = 30;
    const radius = 5000;
    final now = DateTime.now();

    final cachedData = localStorage.getItem('churches_data');
    final cachedTimeStr = localStorage.getItem('churches_timestamp');

    if (cachedData != null && cachedTimeStr != null) {
      final cachedTime = DateTime.tryParse(cachedTimeStr);
      if (cachedTime != null &&
          now.difference(cachedTime).inMinutes < cacheDurationMinutes) {
        try {
          final data = json.decode(cachedData);
          _addMarkers(data['results']);
          if (mounted) setState(() => isLoading = false);
          return;
        } catch (e) {
          debugPrint("Error al decodificar datos cacheados: $e");
        }
      }
    }

    final url = Uri.parse(
      'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=$lat,$lng&radius=$radius&type=church&keyword=catholic&key=$gitlock',
    );

    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        localStorage.setItem('churches_data', response.body);
        localStorage.setItem('churches_timestamp', now.toIso8601String());
        _addMarkers(data['results']);
      } else {
        debugPrint("Error en respuesta HTTP: ${response.statusCode}");
      }
    } catch (e) {
      debugPrint("Error en la petición HTTP: $e");
    } finally {
      if (mounted) setState(() => isLoading = false);
    }
  }

  void _addMarkers(List<dynamic> places) {
    final Set<Marker> markers = {};

    if (_currentPosition != null) {
      markers.add(
        Marker(
          markerId: const MarkerId('currentLocation'),
          position: _currentPosition!,
          infoWindow: const InfoWindow(title: 'Tu ubicación'),
          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),
        ),
      );
    }

    for (var place in places) {
      final lat = place['geometry']['location']['lat'];
      final lng = place['geometry']['location']['lng'];
      final name = place['name'];

      markers.add(
        Marker(
          markerId: MarkerId(place['place_id']),
          position: LatLng(lat, lng),
          infoWindow: InfoWindow(title: name),
          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
        ),
      );
    }

    setState(() {
      _markers = markers;
    });

    if (_currentPosition != null && _mapController != null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _mapController!.animateCamera(
          CameraUpdate.newLatLngBounds(
            _boundsFromMarkers(markers),
            100,
          ),
        );
      });
    }
  }

  LatLngBounds _boundsFromMarkers(Set<Marker> markers) {
    final lats = markers.map((m) => m.position.latitude);
    final lngs = markers.map((m) => m.position.longitude);

    final top = lats.reduce((a, b) => a > b ? a : b);
    final left = lngs.reduce((a, b) => a < b ? a : b);
    final bottom = lats.reduce((a, b) => a < b ? a : b);
    final right = lngs.reduce((a, b) => a > b ? a : b);

    return LatLngBounds(
      northeast: LatLng(top, right),
      southwest: LatLng(bottom, left),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      drawer: Drawer(
        backgroundColor: colorFondo,
        child: ListView(
          children: <Widget>[
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Image.asset(
                'assets/base/fasabe.png',
                width: 30,
                height: 30,
              ),
            ),
            Divider(height: 7, thickness: 0, indent: 2, endIndent: 2, color: colorBorde),
            ListTile(
              title: GestureDetector(
                onTap: () {
                  Navigator.push(context, MaterialPageRoute(builder: (_) => const MyApp()));
                },
                child: Row(
                  children: [
                    Image.asset('assets/emojis/inicio.png', width: 22, height: 22),
                    const SizedBox(width: 5),
                    Text(mc[0]),
                  ],
                ),
              ),
            ),
            ListTile(
              title: GestureDetector(
                onTap: califica,
                child: Row(
                  children: [
                    Image.asset('assets/emojis/star.png', width: 22, height: 22),
                    const SizedBox(width: 5),
                    Text(mc[1]),
                  ],
                ),
              ),
            ),
            ListTile(
              title: GestureDetector(
                onTap: () => launchInBrowser(Uri.parse(urlDevIDG)),
                child: Row(
                  children: [
                    Image.asset('assets/emojis/phone_android.png', width: 22, height: 22),
                    const SizedBox(width: 5),
                    Text(mc[2]),
                  ],
                ),
              ),
            ),
            ListTile(
              title: GestureDetector(
                onTap: () {
                  Navigator.push(context, MaterialPageRoute(builder: (_) => GaleriaMisal()));
                },
                child: Row(
                  children: [
                    Image.asset('assets/emojis/photo.png', width: 22, height: 22),
                    const SizedBox(width: 5),
                    Text(mc[29]),
                  ],
                ),
              ),
            ),
            ListTile(
              title: GestureDetector(
                onTap: () {
                  Navigator.push(context, MaterialPageRoute(builder: (_) => const ConfiGuracion()));
                },
                child: Row(
                  children: [
                    Image.asset('assets/emojis/build.png', width: 22, height: 22),
                    const SizedBox(width: 5),
                    Text(mc[4]),
                  ],
                ),
              ),
            ),
            ListTile(
              title: GestureDetector(
                onTap: () => SharePlus.instance.share(
                  ShareParams(text: urlappIDG),
                ),
                child: Row(
                  children: [
                    Padding(
                      padding: const EdgeInsets.only(right: 10),
                      child: Image.asset('assets/emojis/share.png', width: 22, height: 22),
                    ),
                    Text(mc[32]),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
      appBar: AppBar(
        title: Center(child: Text(mc[7])),
        actions: [
          IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: () => Navigator.pop(context),
          ),
        ],
      ),
      body: isLoading
          ? const Center(
        child: CircularProgressIndicator(color: Colors.blue),
      )
          : premium
          ? Padding(
        padding: const EdgeInsets.only(bottom: 10),
        child: GoogleMap(
          mapType: MapType.normal,
          zoomControlsEnabled: true,
          initialCameraPosition: CameraPosition(
            target: _currentPosition ?? const LatLng(19.4326, -99.1332),
            zoom: 14,
          ),
          onMapCreated: (controller) => _mapController = controller,
          markers: _markers,
        ),
      )
          : Center(child: Text(mc[75])),
    );
  }
}
